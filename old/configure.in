AC_INIT([qmat],[0.1.1])
AC_CONFIG_SRCDIR(src/qmatswig.cxx)
AM_INIT_AUTOMAKE

AC_PROG_CC
AC_PROG_INSTALL

AC_LIBTOOL_DLOPEN
AC_PROG_LIBTOOL
AC_PROG_CPP
AC_PROG_AWK
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_MKDIR_P
AC_PROG_CXX

AC_CONFIG_MACRO_DIR([m4])

# Checks for python libraries.
AC_PYTHON_DEVEL
LDFLAGS="${PYTHON_LDFLAGS} ${LDFLAGS}"
CPPFLAGS="${PYTHON_CPPFLAGS} ${CPPFLAGS}"
AC_PROG_SWIG(1.3.17)
SWIG_ENABLE_CXX
SWIG_PYTHON
AC_SUBST(SWIG)
LIBNUMPY_INCLUDES=$PYTHON_NUMPY_INCLUDE
AC_SUBST(LIBNUMPY_INCLUDES)

AC_MSG_CHECKING(for kernel)
case `uname` in 
    Darwin)
        AC_MSG_RESULT(darwin)
        QMATKERNEL="darwin"
        QMAT_PYTHON_LIBNAME="libqmat.0.dylib"
	ARCH_FLAGS=""
        # "-isysroot /Developer/SDKs/MacOSX10.5.sdk -mmacosx-version-min=10.5"
        CFLAGS="${CFLAGS} ${ARCH_FLAGS}"
        CXXFLAGS="${CXXFLAGS} ${ARCH_FLAGS}"
        LDFLAGS="${LDFLAGS} ${ARCH_FLAGS}"
    ;;
    Linux)
        AC_MSG_RESULT(linux)
        QMATKERNEL="linux"
        QMAT_PYTHON_LIBNAME="libqmat.so.0.0.0"
    ;;
    *) 
        AC_MSG_RESULT(other)
        AC_MSG_WARN([Platforms other than GNU/Linux and Mac OS X are not actively supported 
                     by the configure script.])
        QMATKERNEL="other"
    ;;
esac

AC_SUBST(QMAT_PYTHON_LIBNAME)

AC_CXX_LIB_BLITZ(["required"])

# if this is darwin, unconditionally use atlas:
if test "$QMATKERNEL" = "other" ; then
    AC_CHECK_LIB([atlas], [dgetrf_], HAVE_LAPACKX="yes")
    if test "${HAVE_LAPACKX}" != "yes" ; then
        AC_MSG_ERROR([Couldn't find lapack.])
    else
        LIBLAPACK_LDFLAGS="-latlas -llapack"
        CPPFLAGS="${CPPFLAGS} -DHAVE_LAPACK " 
    fi
else
    AC_CHECK_LIB([lapack], [dgetrf_], HAVE_LAPACKX="yes")
    if test "${HAVE_LAPACKX}" != "yes" ; then
        AC_CHECK_LIB([lapack3], [dgetrf_], HAVE_LAPACK3="yes")
        if test "${HAVE_LAPACK3}" != "yes" ; then
            AC_CHECK_LIB([lapack-3], [dgetrf_], HAVE_LAPACK_3="yes")
                if test "${HAVE_LAPACK_3}" != "yes" ; then
                    AC_CHECK_LIB([atlas], [dgetrf_], HAVE_ATLAS="yes")
                    if test "${HAVE_ATLAS}" != "yes" ; then
                        AC_MSG_ERROR([Couldn't find lapack.])
                    else
                        LIBLAPACK_LDFLAGS="-llapack -latlas"
                        CPPFLAGS="${CPPFLAGS} -DHAVE_LAPACK " 
                    fi
                else
                    LIBLAPACK_LDFLAGS="-llapack-3"
                    CPPFLAGS="${CPPFLAGS} -DHAVE_LAPACK " 
                fi
        else
            LIBLAPACK_LDFLAGS=-llapack3
            CPPFLAGS="${CPPFLAGS} -DHAVE_LAPACK " 
        fi
    else
        LIBLAPACK_LDFLAGS=-llapack
        CPPFLAGS="${CPPFLAGS} -DHAVE_LAPACK " 
    fi
fi
AC_SUBST(LIBLAPACK_LDFLAGS)

AC_CHECK_LIB([blas], [dgemm_], HAVE_BLAS="yes")
if test "${HAVE_BLAS}" != "yes" ; then
    AC_MSG_ERROR([Couldn't find blas.])
else
    LIBBLAS_LDFLAGS=-lblas
fi
AC_SUBST(LIBBLAS_LDFLAGS)


AC_CONFIG_HEADERS([qmatconf.h])

AC_CONFIG_FILES([Makefile src/Makefile])

AC_OUTPUT
